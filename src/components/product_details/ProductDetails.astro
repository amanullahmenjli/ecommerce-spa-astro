---
import ClientsInfo from './ClientsInfoInput.astro'
import ProductSizes from './ProductSizes'
import Quantity from './Quantity.astro'
import ImageGallery from './ImageGallery'
import circle from '~/assets/images/circle.svg'
const { image, name, description, data } = Astro.props
---

<!-- Product Details Card -->
<div class="flex flex-row flex-wrap w-full px-2 gap-[32px] justify-center items-start">
  <!-- * The Product's Images Gallery -->
  <ImageGallery client:only="react" image={image} namee={name}></ImageGallery>

  <!-- * Product Details -->
  <!-- * Column Layout -->
  <div class="flex flex-col gap-[16px] mt-5 p-[32px]">
    <!-- * Product Name -->
    <h1 class="text-xl font-semibold text-black">{ name }</h1>

    <!-- * Product Description -->
    <div class="font-normal text-sm max-w-[65ch]  text-[#848484]">
      {description}  
    </div>

    <!-- * Form -->

    <form id="commande" class="flex flex-col gap-[16px]">

      <!-- * Product Name -->
      <input type="hidden" name="Produit" value={name}>

      <!-- * Product Size -->
      <div>
        <h2 class="font-semibold text-black">Choisir une Option:</h2>
        <ProductSizes client:load data={data}></ProductSizes>
      </div>

      <!-- * Client Info -->
      <div>
        <h2 class="font-semibold text-black">Insérez votre Informations:</h2>
        <ClientsInfo />
      </div>

      <!-- * Bottom Row -->
      <div class="flex flex-row flex-wrap align-text-bottom items-center gap-3">
        <!-- * Prices -->
        <div class="flex flex-row flex-wrap align-text-bottom items-baseline gap-3">
          <!-- * Current Price -->
          <p class="font-bold text-[26px] md:text-[36px] text-[#E60D54]" id="final_price">
            {data[0].price} DT
          </p>

          <!-- * Old Price -->
          <p class="font-bold  text-[19px] md:text-[26px]  text-[#7F7F7F] line-through" id="old_price">
            {parseInt(data[0].price) * 2 + ' DT'}
          </p>
        </div>

        <!-- * Quantity -->
        <Quantity></Quantity>

        <input type="hidden" name="" id="initial_price" value={data[0].price}>

        <!-- * Submit Button -->
        <div class="my-auto row-auto">
          <input type="submit" value="J'Achète"  class="bg-primary text-white cursor-pointer btn-md rounded-md text-base">
        </div>

      </div>
    </form>
    <dialog id="sucess" class="modal">
      <div class="modal-box max-w-[415px] p-0 bg-[#EDF2FF]">
        <!-- * Close button -->
        <form method="dialog">
          <button class="btn btn-square btn-sm rounded-md btn-ghost absolute right-2 top-2">✕</button>
        </form>
        <div class="my-[75px] gap-[25px] flex flex-col justify-center">
          <img src={circle.src} alt="" width="122px" class="m-auto">
          <h1 class="w-[180px] text-4xl text-center m-auto font-semibold">Commande confirmé!</h1>

          
        </div>

        <form method="dialog" class="px-8 pb-8 pt-0">
          <!-- if there is a button in form, it will close the modal -->
          <button class="btn w-full bg-slate-900 hover:bg-slate-800 text-white">Fermer</button>
        </form>
 
        
    </dialog>
</div>




<script is:inline src="https://unpkg.com/@supabase/supabase-js"></script>


<script is:inline>
  // Create the supabase client
  const { createClient } = supabase
  const supbase = createClient('https://koduxbamyurvkylcdimi.supabase.co', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtvZHV4YmFteXVydmt5bGNkaW1pIiwicm9sZSI6ImFub24iLCJpYXQiOjE2OTQ4NTY1NDQsImV4cCI6MjAxMDQzMjU0NH0.nbdnv9dkqZyg29T6y4J9LPOGXPXQgslIfQYoCrcYFaY')

  const form = document.getElementById('commande')

  form.addEventListener('submit', async (event) => {
          event.preventDefault();

          const formInputs = form.querySelectorAll('input')

          let submision = {}

          formInputs.forEach(element => {
            const { value, name } = element
            if (value && name) {
                if (name == 'Quantité'){
                  submision[name] = parseInt(value)
                } else {
                  submision[name] = value
                }
                // console.log(name)
            }
          })

          const date = new Date();

          let day = date.getDate();
          let month = date.getMonth() + 1;
          let year = date.getFullYear();

          // This arrangement can be altered based on how we want the date's format to appear.
          let currentDate = `${month}/${day}/${year}`;

          submision['Date'] = currentDate;

          submision.Taille = form.Taille.value;

          const { error } = await supbase.from('Commandes').insert([submision], { returning: 'minimal'}).select()

          if (error) {
              console.log(error)
          } else {
            const final_price = parseFloat(document.getElementById('final_price').innerHTML.match(/[-+]?[0-9]*\.?[0-9]+/)[0])
            sucess.showModal()
            fbq('trackCustom', 'Purchase', {currency: "TND", value: final_price});

            form.reset()
          }
          
          console.log(submision)
      })
</script>